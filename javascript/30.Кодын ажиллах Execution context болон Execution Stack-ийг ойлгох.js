// learn 30a. Кодын ажиллах Execution context болон Execution Stack-ийг ойлгох

/*1. Execution context 
   2. Global execution context 
   3. Execution Stack талаар үзэцгээе. javascript код цаанаа яг яаж ажилдаг вэ. */

/**********************    1. Execution context   **********************************/
/* Execution ===> Програм ажлуулах 
   Execution context  ===> Програм ажлуулдаг орчин 
Javascript-ын функц бүрийг ажиллахад түүнд зориулагдсан ажиллах орчин буюу Execution context javascript engune үүсдэг. Дөрөв таван функц дарааллаад ажиллавал дөрөв таван тусдаа Execution context үүсдэг. Тэгэхээр  нэг Execution context дотор доорх хувьсагч объект, This тусгай хувьсагч, SCOPE CHAIN гэсэн 3 зүйл байдаг. 

          функцын кодыг ажиилах орчин - Execution Context 
     1. Хувьсагч объект      2.This тусгай хувьсагч       3.SCOPE CHAIN

1. Хувьсагч объект :
javascript кодыг parse хийгээд тэрэн дотороо  үг үсгийн алдаа шалгахаас гадна ямар ямар хувьсагч байна ямар ямар функц байна гэдгийг функцын кодноос хайж олдоод Хувьсагч объект дотор утыг нь хадгалах зай бэлддэг байгаа. Мөн уг функц дотор өөр ямар функцууд зориулагдсан байна тэдгээрийг  кодтой хамт Хувьсагч объект дотор бичиж бэлддэг байгаа. 
Эдгээр функцыг ажиллахаас өмнө функц дотор байгаа бүх хувьсагчидыг мэдээд санах ойд бэлдчихсэн байдаг. 
Хувьсагч объект бэлдэхдээ бүгдэндэн нь undefined  гэдэг тусгай утгыг олгодог байж байгаа. Тийм учираас хувьсагчид утга олгоогүй байхад хэвлээд үзэхээр undefined гэж гардаг. 

2. This тусгай хувьсагч :
функцын кодыг scan хийгээд parse хийгээд бүх хувьсагчид функцуудыг нь Хувьсагч объект бичсэний дараа  Тусгай тухайн функцад зориулсан This тусгай хувьсагчийг javascript engune үүсгээд Execution context-той холбож өгдөг байгаа 
This тусгай хувьсагч - энэ функцыг ямар объект агуулж байна  тэр объектыг нь энэ THIS гэдэг хувьсагч зааж байдаг.  Энэ функцын өөр нэг объектын функц байдлаар хийгдсэн бол this гэдэг тэр объектыг заах нь байна. THIS ээр нь дамжуулаад тэр объектын өгөгдөл болон агуулж байгаа объектын өгөгдөл болон  бусад функцуудыг дууддаг. Энэ бол эх объектруу хандах тусгай заагч хувьсагч гэж ойлгож болно. */

/**
 3. SCOPE CHAIN: 
Эх функцынхаа өгөгдөлрүү хандахад SCOPE CHAIN ашиглана.
SCOPE ==>  Функц доторх функц тэрний дотор функц гэх мэт олон функц давхарлаж зарлаж болдог.Хамгийн дотор талын функц гадна талынхаа хэдэн давхар функц байсан ч хандаж чадна. Харин гадна талын функцаас дотор талынхаа функцруу хандаж чадахгүй.Функц дотор заралсан хувьсагчыг local хувьсагч гэдэг.

javascript-ын функц ажиллахад  1. Хувьсагч объект      2. This тусгай хувьсагч    3. SCOPE CHAIN  энэ 3 үүсээд 
1. Хувьсагч объект = хувьсагчид, функцуудыг бэлдээд 
2. This тусгай хувьсагч =  this хувьсагчийг нь бэлдэж олгоод 
3. SCOPE CHAIN = SCOPE CHAIN бэлдээд ингээд функц ажиллахад бэлэн бөгөөд үүнийг функцын careation хэсэг буюу үүсгэлтийн хэсэг гэнэ. */

/*************************    2. Global execution context    **********************************/
/*Глобал кодын ажиилах орчин буюу - Global Execution Context 
функцын зарлалтаас гадуур байгаа бүх код энд ажиллана.

               Глобал кодын ажиилах орчин буюу - Global Execution Context  
              1. Глобал объект          2.This тусгай хувьсагч        3. NULL 

1. Глобал объект = broser дээр ажиилаж байх үед window гэдэг объект байдаг. Nodejs дээр бол энэ глобал нэртэй объект байдаг. Сүүлийн үеийн стандарт дээр globalThis гэдэг нэртэй объект байдаг. Тэр объект энэ Глобал объект юм.
2.This тусгай хувьсагч = Global Execution Context гадуур өөр execution context байгаа гэвэл байхгүй энийг агуулсан гадуур нь функц байгаа юу гэвэл байхгүй. Global Execution Context хамгийн гаднах context бусад функцууд, execution context -ууд дотор нь үүсдэг. Тэгэхээр энэ дотор гэж арай хэлж болохгүй шүү энэ дээр тулгуурлан үүсдэг. This тусгай хувьсагч гаднах заадаг боловч гадна талд юм байхгүй учир 1. Глобал объектоо заадаг. 
this гэж хадахад глобал объект нь гарч ирдэг байгаа. 1. Глобал объект 2.This тусгай хувьсагч энэ 2 ижилхэн 
3. NULL = Global Execution Context хэрэглэдгүй null байж байдаг.  */

// learn 30b. Кодын ажиллах Execution context болон Execution Stack-ийг ойлгох

/******************************* 3. Execution Stack  *******************************/
// stack --> Давхарлаж өрж тавьсан зүйлийг хэлнэ.
// Execution Stack - гэдэг бол execution context дээр дээрээс давхарлаж тавьж хадгалж явдаг өгөгдлийн бүтэцийг хэлдэг.

var name = "Jhon";

function first() {
  var a = "hello";
  second();
  var x = a + name;
}
function second() {
  var b = "hi";
  third();
  var z = b + name;
}
function third() {
  var c = "hey";
  var z = c + name;
}
first();
/*Дээрх кодыг ажилуулахын тулд javascript дээрээсээ доошооо, мөрөнд урдаас хойшоо гэсэн байрлалаа уншдаг. Тийм болохоор  эхлээд var name = "Jhon";, first, second, third гэсэн дараалалтай байдаг. Ажилуулахын тулд javascript engune хамгийн түрүүүнд Global execution context үүсгэж өгнө. 

/* 1. Global execution context
1. Глобал объект          2.This тусгай хувьсагч        3. NULL  хэсгээс бүрдэг. 
Глобал объект дээрээ name гэсэн хувьсагч first, second, third гэсэн функцуудыг бэлдэж өгнө.  хамгийн сүүлд нь  first(); дуудна. execution context-ууд ажиллаж дуусны дараа хамгийн сүүлд дуудагдаж ажилаад дуусангуут устаж алга болдог. 

2. Execution context
1. Хувьсагч объект      2.This тусгай хувьсагч          3.SCOPE CHAIN
Хувьсагч объект дотор а, х гэсэн хувьсагчыг боловсруулаад undefanid утга өгнө. This заагчын үүсгээд SCOPE CHAIN -аар Global execution context нь холбогдоно. Дуусаад дуудагдаж ажилаад дуусангуут устаж алга болдог. */
