// learn 32. Ажиллах орчны үүсгэлтийн болон ажиллах шатууд, creation, execution, hoisting

var name = "Jhon";

function first() {
  var a = "hello";
  second();
  var x = a + name;
}
function second() {
  var b = "hi";
  third();
  var z = b + name;
}
function third() {
  var c = "hey";
  var z = c + name;
}
first();

// Execution context -> ажиллах орчин
// Execution stack -> execution context санах ойн тусгай орон зай юм.

/*****************Execution context ===> ҮҮСГЭХ болон АЖИЛЛУУЛАХ шат****************/

/*
Execution context - Дотор 2 үе шат явагддаг. 
        1. Үүсгэх шат (Creation)
        2. Ажиллуулах шат (Execution)

1. Үүсгэх шат (Creation) нь програмыг функцыг ажиллахаас нь өмнө кодын scan хийгээд гурван ялгаатай үйл ажиллагаа хийддэг. 
        1.Хувьсагч объект: Хувьсагчын объект гэдэг санах ой тусгай орон зайг үүсгээд тэрэн дотор энэ функц дотор зарлагдсан бүх хувьсагч бүх функцыг хайж олоод энэд байрлуулдаг. Хувьсагчид undefined гэсэн тусгай утга  өгдөг. 
        2. SCOPE CHAIN:  Функц доторх функц тэрний дотор функц гэх мэт олон функц давхарлаж зарлаж болдог.Хамгийн дотор талын функц гадна талынхаа хэдэн давхар функц байсан ч хандаж чадна. Харин гадна талын функцаас дотор талынхаа функцруу хандаж чадахгүй.Функц дотор заралсан хувьсагчыг local хувьсагч гэдэг.

        3.This тусгай хувьсагч: функцыг ямар нэг объект агуулж байдаг. Тэр объектыг энэ THIS гэдэг хувьсагч зааж байдаг. THIS ээр нь дамжуулаад тэр объектын өгөгдөл болон функцуудыг дууддаг. Энэ бол эх объектруу хандах тусгай заагч хувьсагч гэж ойлгож болно. 
Энэ гурван үүсгэгч шат дуусны дараа Ажиллуулах шат эхлэн. 

2. Ажиллуулах шат (Execution)
функцын кодыг мөр мөрөөр нь ажиллуулдаг. 
     1.Хувьсагч объект: 1. Hoist хийх - функцын кодыг скан хийгээд:
                       -Дотор нь байх бүх хувьсагчийн зарлалтыг олж хувьсагчийн объектын    санах ойд байрлуулж undefined утга өгнө. 
                        -Дотор нь байх бүх функцуудыг олж хувьсагчийн объектын санах ойд байрлуулна. (функц дотор функц зарлалт байдаг тухай үзсэн.)
                        -дээрх 2-г to hoist-->(өргөх гэсэн утгатай) гэдэг байгаа. 
                        (Жишээ нь app.js файл байлаа гэхэд тэр app.js файл хардан дээр байж байдаг. Хард бол компьютерийн хамгийн удаан ажилладаг хэсэг бөгөөд тэгсэн мөртлөө компьютерийг унтараахад хүртэл хадгалдаг болмжтой төхөөрөмж. Тэгэхээр бүх код хардан дээр байрладаг бөгөөд дараа ажиллах үедээ  хардан дээр байгаа файлыг javascript engune скан хийгээд санах ойд байрлуулдаг. Ажилж байгаа програм болгон заавалчгүй санах ойд байж байгаа. Яг ажиллулах агшинд санах ойгоос аваад процесс руу  хийдэг байж байгаа Санах ой гэдэг RAM  процесс гэдэг CPU байгаа  Програм харднаас RAM руу ороод RAM-наас CPU-рүү ордог байж байгаа.  )
                        2. функцын дотор тусгай системийн arguments гэдэг хувьсагч үүсгэнэ. Энэ хувьсагч нь функц рүү дамжуулсан бүх утгуудыг массив байдлаар хадгална (функц болгонд нэг arguments хувьсагч заавалчгүй үүсдэг. Функцруу дуудахад аргемант утга дамжуулахад энэ arguments хувьсагчид массив байдлаар хадгалагдана. функцын  бүх дамжуулсан утгыг ганцхан аргемантаас олох боломжтой. энэ arguments зарлахгүй javascript engune хийчихсэн байдаг.   )
                        arguments хувьсагч нь javascript хүчирхэг динамик код бичих боломжийг өгдөг.  */

// hoisting ==> хувьсагчид
console.log(b);
var b = 12;
console.log(b);

// hoisting ==> function
x(); // ягаад вэ үүсгэлтийн шат эхлэхээс өмнө дотор нь умар функцууд байна гэж хайж олоод x гэдэг функц байна гэдгийг мэдэнгүүтээ хувьсагчын объектын орон зайд ийм console.log('x бол функц'); байрлуулчихсан байдаг.
function x() {
  console.log("x function declaration statment");
}
x();

// ягаад гэвэл ажилуулах шатанд энэ функц байна уу үгүй гэж удахгүйн тулд байрлуулаад бэлдчихдэг.

// function declaration statment
// function exxpression
y(); //дуудаж болохгүй байна. Ягаад гэвэл хувьсагчинд функц өгсөн.
var y = function () {
  console.log("y function exxpression"); // анхнаасаа байсан 1,0 ахуулаад
};
y();
