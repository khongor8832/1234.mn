// 29 Javascript хөшигний цаана - Функц доторх функц, хувьсагч функцийн үзэгдэх орчин буюу scope

// SCOOP CHAIN ===> Хамгийн дотор талын функц гадна талынхаа хэдэн давхар функц байсан ч хандаж чадаж байна. Харин гадна талын функцаас дотор талынхаа функцруу хандаж чадахгүй байна.
// Функц доторх функц тэрний дотор функц гэх мэт олон функц давхарлаж зарлаж болно.
// функцын гадна зарлагдаж байгаа хувьсагч глобал объек дотор зарлагдаж байгаа учир глобал хувьсагч гэнэ.
function sayHello() {
  var friend = "Сараа"; // Програмистууд энэд заралсан хувьсагчыг local хувьсагч гэдэг.
  howDoYouDo();
  function howDoYouDo() {
    console.log("how do you do " + friend); // friend хандаж болно.
  }
}
// Дахин дахин давтагдсан кодыг нэг дор болгож бичээд тэгээд функцаа дараа дахин дахин дуудах замаар кодыг үр ашигтай бичдэг Dry буюу Dont Repeat Yourself зарчмийг хэрэгжүүлэхэд функцаар хэрэгжүүлдэг.

/*Хувсагч функцийн үзэгдэх орчин буюу SCOPE 
  1. Функц нь Глобаль Объектийн бүх өгөгдөл хандаж чадна. 
  2. Функц нь гаднах бүх функцийнхээ өгөгдөлд хандаж чадна.
  3. Функц дотор зарлагдсан өгөгдөл функц функцийн гадна устаж алга болно. 
  4. функц дотор зарлагдсан функц рүү функцийн гаднаас нь хандаж боломжгүй. */

var pi = 3.15;

function mendchileh() {
  var friend = "Сараа";
  console.log("Сайн уу " + friend);

  ajilTurulAsuuh();
  function ajilTurulAsuuh() {
    var job = "web designer " + pi; // гэсэн хувьсагчруу хандаж чадаж байна. Глобал болохоор
    console.log(friend + " ажил хэр байна даа ? ");
    console.log(job + " ажилыг сонирхож байна уу ?");

    aawEejSainu();
    function aawEejSainu() {
      var aaw = "boldoo";
      console.log(friend + "ажил хэр байна даааааааа ? ");
      console.log(aaw + " сайн уу? ");
    }
  }
}
mendchileh();
// Хамгийн дотор талын функц гадна талынхаа хэдэн давхар функц байсан ч хандаж чадаж байна. Харин гадна талын функцаас дотор талынхаа функцруу хандаж чадахгүй байна. Энийг SCOOP CHAIN гэдэг.
